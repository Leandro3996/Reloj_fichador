services:
  db:
    image: mysql:8.4
    restart: always
    environment:
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      # Si deseas un usuario no-root, define a continuación:
      # MYSQL_USER: "${MYSQL_USER}"
      # MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      # De lo contrario, accede con root y la contraseña dada.
    volumes:
      - ./data:/docker-entrypoint-initdb.d
      - ./mysql_data:/var/lib/mysql
    ports:
      - "53306:3306"

  web:
    build: .
    restart: always
    command: >
      /app/wait-for-it.sh db:3306 -- 
      sh -c "python manage.py collectstatic --noinput && gunicorn --workers 3 --bind 0.0.0.0:58000 mantenedor.wsgi:application"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "58000:58000"
    depends_on:
      - db
      - redis
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - LANG=${LANG}
      - LANGUAGE=${LANGUAGE}
      - LC_ALL=${LC_ALL}

  celery:
    build: .
    restart: always
    command: >
      /app/wait-for-it.sh db:3306 -- 
      celery -A mantenedor worker --loglevel=info
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - LANG=${LANG}
      - LANGUAGE=${LANGUAGE}
      - LC_ALL=${LC_ALL}

  celery-beat:
    build: .
    restart: always
    command: >
      /app/wait-for-it.sh db:3306 -- 
      celery -A mantenedor beat --loglevel=info
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - LANG=${LANG}
      - LANGUAGE=${LANGUAGE}
      - LC_ALL=${LC_ALL}

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6381:6379"

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "5080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - web

  birt:
    image: tomcat:9.0
    restart: always
    environment:
      - JAVA_OPTS=-Djava.awt.headless=true
    ports:
      - "6000:8080"
    volumes:
      - ./birt/birt.war:/usr/local/tomcat/webapps/birt.war
      - ./birt_drivers/mysql-connector-j-8.0.33.jar:/usr/local/tomcat/lib/mysql-connector-j-8.0.33.jar
    depends_on:
      - db
    # Si BIRT necesita que la DB esté lista antes de iniciarse (generalmente Tomcat puede reintentar),
    # puedes agregar un wait-for-it.sh similar:
    # command: >
    #   /app/wait-for-it.sh db:3306 -- 
    #   catalina.sh run

  backup:
    image: mysql:8.4
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
    volumes:
      - ./backups:/backups
      - ./wait-for-it.sh:/wait-for-it.sh
    entrypoint: ["/bin/sh", "-c", "/wait-for-it.sh db:3306 -- mysqldump -h db -u root -p$MYSQL_ROOT_PASSWORD $MYSQL_DATABASE > /backups/backup_$(date +%F_%T).sql; sleep 7200"]
    depends_on:
      - db

volumes:
  static_volume:
  media_volume:
